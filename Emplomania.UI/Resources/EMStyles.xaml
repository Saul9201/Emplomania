<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation" 
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" 
                    >
    <!--Colores Basicos-->
    <SolidColorBrush x:Key="EMBackgroundBrush" Color="#ffffff"/>
    <!--Blanco-->
    <SolidColorBrush x:Key="EMBasicForeground" Color="#3c3c3c"/>
    <!--Gris oscuro-->

    <!--Colores y fuentes del Menu-->
    <SolidColorBrush x:Key="EMMenuBackgroundBrush" Color="#9a2a8b"/>
    <!--Morado claro-->
    <SolidColorBrush x:Key="EMMenuMouseOverBrush" Color="#761874"/>
    <!--Morado oscuro-->
    <SolidColorBrush x:Key="EMMenuMouseOverBarBrush" Color="#fbcd05"/>
    <SolidColorBrush x:Key="EMMenuForegroundBrush" Color="#f4e1e1"/>
    <!--Blanco hueso-->
    <SolidColorBrush x:Key="EMMenuUnableForegroundBrush" Color="#520d49"/>
    <FontFamily x:Key="EMMenuFontFamily">Ubuntu</FontFamily>
    <FontWeight x:Key="EMMenuFontWeight">Bold</FontWeight>
    <SolidColorBrush x:Key="EMSubMenuBackgroundBrush" Color="#fbcd05"/>
    <SolidColorBrush x:Key="EMSubMenuForegroundBrush" Color="#454545"/>
    <SolidColorBrush x:Key="EMSubMenuMouseOverBrush" Color="#9a2a8b"/>
    <SolidColorBrush x:Key="EMSubMenuMouseOverForegroundBrush" Color="#ffffff"/>
    <FontFamily x:Key="EMSubMenuFontFamily">Ubuntu</FontFamily>
    <FontWeight x:Key="EMSubMenuFontWeight">Regular</FontWeight>

    <!--Colores TextBox, ComboBox, PaswordBox and GroupResults-->
    <SolidColorBrush x:Key="EMTextBoxBackgroundColor" Color="#faf6fa"/>
    <SolidColorBrush x:Key="EMTextBoxBorderColor" Color="#f0e3f2"/>

    <!--Colores Buttons-->
    <!--Basic Button-->
    <SolidColorBrush x:Key="EMBasicButtonBackgroundColor" Color="#ca2b92"/>
    <SolidColorBrush x:Key="EMBasicButtonMouseOverBackgroundColor" Color="#fa47a8"/>
    <SolidColorBrush x:Key="EMBasicButtonIsPressedBackgroundColor" Color="#ffffff"/>
    <SolidColorBrush x:Key="EMBasicButtonForegroundColor" Color="#ffffff"/>
    <SolidColorBrush x:Key="EMBasicButtonMouseOverForegroundColor" Color="#ffffff"/>
    <SolidColorBrush x:Key="EMBasicButtonIsPressedForegroundColor" Color="#ca2b92"/>
    <SolidColorBrush x:Key="EMBasicButtonIsPressedBorderColor" Color="#ca2b92"/>

    <!--Yellow Button-->
    <SolidColorBrush x:Key="EMYellowButtonBackgroundColor" Color="#fbcd05"/>
    <SolidColorBrush x:Key="EMYellowButtonMouseOverBackgroundColor" Color="#fa47a8"/>
    <SolidColorBrush x:Key="EMYellowButtonIsPressedBackgroundColor" Color="#ffffff"/>
    <SolidColorBrush x:Key="EMYellowButtonForegroundColor" Color="#9a2a8b"/>
    <SolidColorBrush x:Key="EMYellowButtonMouseOverForegroundColor" Color="#ffffff"/>
    <SolidColorBrush x:Key="EMYellowButtonIsPressedForegroundColor" Color="#ca2b92"/>
    <SolidColorBrush x:Key="EMYellowButtonIsPressedBorderColor" Color="#ca2b92"/>

    <!--Fuentes basicas-->
    <FontFamily x:Key="EMBasicFontFamily">Ubuntu</FontFamily>
    <FontWeight x:Key="EMFirstFontWeight">Regular</FontWeight>
    <FontWeight x:Key="EMSecondFontWeight">Bold</FontWeight>

    <!--Margings-->
    <Thickness x:Key="StackPanelItemMargin">0,0,0,30</Thickness>
    <Thickness x:Key="StackPanelItemMargin2">0,0,0,10</Thickness>

    <!--Menu-->
    <Style x:Key="EMSubMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="FontFamily" Value="{StaticResource EMSubMenuFontFamily}"/>
        <Setter Property="FontWeight" Value="{StaticResource EMSubMenuFontWeight}"/>
        <Setter Property="Foreground" Value="{StaticResource EMSubMenuForegroundBrush}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="5*"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="10*"/>
                                <RowDefinition Height="10"/>
                            </Grid.RowDefinitions>
                            <ContentPresenter x:Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" Grid.Row="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}"/>
                        <Trigger Property="IsChecked" Value="True"/>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource EMSubMenuMouseOverBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource EMSubMenuMouseOverForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="#0A000000"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#21000000"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{StaticResource EMMenuFontFamily}"/>
        <Setter Property="FontWeight" Value="{StaticResource EMMenuFontWeight}"/>
        <Setter Property="Background" Value="{StaticResource EMMenuBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource EMMenuForegroundBrush}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid x:Name="Grid" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2*"/>
                                <RowDefinition Height="50*"/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="Activ" Margin="0"/>
                            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                                <Border x:Name="SubMenuBorder" BorderBrush="{x:Null}" Background="{StaticResource EMSubMenuBackgroundBrush}">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid x:Name="Grid1" RenderOptions.ClearTypeHint="Enabled">
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}"/>
                        <Trigger Property="IsChecked" Value="True"/>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource EMMenuMouseOverBrush}"/>
                            <Setter Property="Fill" TargetName="Activ" Value="{StaticResource EMMenuMouseOverBarBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource EMMenuUnableForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource EMSubMenuItemStyle}"/>
    </Style>

    <Style x:Key="EMMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource EMMenuBackgroundBrush}"/>
        <Setter Property="ItemContainerStyle" Value ="{StaticResource EMMenuItemStyle}"/>
    </Style>

    <!--Separators-->
    <Style x:Key="EMSearchHeaderSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="#fbcd05"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="2" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMExpanderSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="#ca2b92"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="2" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Labels-->
    <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource EMBasicForeground}"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="TextElement.FontFamily" Value="{StaticResource EMBasicFontFamily}"/>
        <Setter Property="TextElement.FontWeight" Value="{StaticResource EMFirstFontWeight}"/>
    </Style>

    <Style x:Key="EMHeaderLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextElement.FontWeight" Value="{StaticResource EMSecondFontWeight}"/>
    </Style>

    <Style x:Key="EMSearchHeaderLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <StackPanel Orientation="Vertical">
                            <Separator Style="{StaticResource EMSearchHeaderSeparatorStyle}"/>
                            <ContentPresenter HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,5,0,5"/>
                            <Separator Style="{StaticResource EMSearchHeaderSeparatorStyle}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMGroupHeaderLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="#fbcd05"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="FontWeight" Value="{StaticResource EMSecondFontWeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <StackPanel Orientation="Vertical">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Separator Style="{StaticResource EMSearchHeaderSeparatorStyle}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMGroupHeader2LabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="TextElement.FontWeight" Value="{StaticResource EMSecondFontWeight}"/>
        <Setter Property="Foreground" Value="#fbcd05"/>
    </Style>

    <Style x:Key="EMClientFieldTitleLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="#646464"/>
    </Style>
    
    <Style x:Key="EMClientFieldContentLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="#646464"/>
        <Setter Property="TextElement.FontWeight" Value="{StaticResource EMSecondFontWeight}"/>
    </Style>
    


    <!--ComboBoxs-->
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="BorderBrush" Value="{StaticResource EMTextBoxBorderColor}"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="231"/>
    </Style>

    <Style TargetType="telerik:RadComboBox" BasedOn="{StaticResource RadComboBoxStyle}">
        <Setter Property="BorderBrush" Value="{StaticResource EMTextBoxBorderColor}"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="231"/>
    </Style>

    <Style TargetType="telerik:RadMaskedCurrencyInput" BasedOn="{StaticResource RadMaskedCurrencyInputStyle}">
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="231"/>
    </Style>
    <!--TextBoxs-->
    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource EMTextBoxBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource EMTextBoxBorderColor}"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="231"/>
        <Setter Property="Foreground" Value="{telerik:Office2013Resource ResourceKey={x:Static telerik:Office2013ResourceKey.InvertedBrush}}"/>
        <Setter Property="FontFamily" Value="{telerik:Office2013Resource ResourceKey={x:Static telerik:Office2013ResourceKey.FontFamily}}"/>
        <Setter Property="Padding" Value="6,2"/>
        <Setter Property="FontSize" Value="{telerik:Office2013Resource ResourceKey={x:Static telerik:Office2013ResourceKey.FontSizeL}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="RootElement" SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="hover"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement"/>
                                        <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_ContentHost"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="Border">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <SolidColorBrush Color="Transparent"/>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ReadOnlyVisualElement"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="FocusedVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <Grid>
                                <Border x:Name="ReadOnlyVisualElement" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" Opacity="0"/>
                                <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Background="Transparent" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Label Margin="5,-2,0,0" x:Name="WaterMarkLabel" Content="{TemplateBinding Tag}" VerticalAlignment="Center" Visibility="Collapsed" Foreground="Gray"/>
                            </Grid>
                        </Border>
                        <Border x:Name="DisabledVisualElement" BorderBrush="{DynamicResource {x:Static telerik:Office2013ResourceKey.MediumDarkBrush}}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" IsHitTestVisible="False" Opacity="0"/>
                        <Border x:Name="hover" BorderBrush="{DynamicResource {x:Static telerik:Office2013ResourceKey.AccentMainBrush}}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" IsHitTestVisible="False" Opacity="0"/>
                        <Border x:Name="FocusedVisual" BorderBrush="{DynamicResource {x:Static telerik:Office2013ResourceKey.AccentMainBrush}}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" IsHitTestVisible="False" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMLargeTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!--PasswordBoxs-->
    <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{StaticResource EMTextBoxBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource EMTextBoxBorderColor}"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="231"/>
        <Setter Property="Foreground" Value="{telerik:Office2013Resource ResourceKey={x:Static telerik:Office2013ResourceKey.InvertedBrush}}"/>
        <Setter Property="FontFamily" Value="{telerik:Office2013Resource ResourceKey={x:Static telerik:Office2013ResourceKey.FontFamily}}"/>
        <Setter Property="Padding" Value="6,2"/>
        <Setter Property="FontSize" Value="{telerik:Office2013Resource ResourceKey={x:Static telerik:Office2013ResourceKey.FontSizeL}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid x:Name="RootElement" SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="hover"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement"/>
                                        <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_ContentHost"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="FocusedVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <Grid>
                                <Border x:Name="DisabledVisualElement" BorderBrush="{DynamicResource {x:Static telerik:Office2013ResourceKey.MediumDarkBrush}}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" IsHitTestVisible="False" Margin="-1" Opacity="0"/>
                                <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <Border x:Name="hover" BorderBrush="{DynamicResource {x:Static telerik:Office2013ResourceKey.AccentMainBrush}}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" IsHitTestVisible="False" Opacity="0"/>
                        <Border x:Name="FocusedVisual" BorderBrush="{DynamicResource {x:Static telerik:Office2013ResourceKey.AccentMainBrush}}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" IsHitTestVisible="False" Visibility="Collapsed"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="telerik:RadPasswordBox" BasedOn="{StaticResource RadPasswordBoxStyle}">
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="231"/>
    </Style>
    
    <!--Border-->
    <Style x:Key="EMSearchResultPresenterBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource EMTextBoxBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource EMTextBoxBorderColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="Width" Value="370"/>
        <Setter Property="Height" Value="70"/>
    </Style>

    <!--Buttons-->
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource EMBasicButtonBackgroundColor}"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="TextElement.FontFamily" Value="Ubuntu"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonForegroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" CornerRadius="20" BorderThickness="2" Background="{TemplateBinding Background}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource EMBasicButtonIsPressedBackgroundColor}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{StaticResource EMBasicButtonIsPressedBorderColor}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{StaticResource EMBasicButtonIsPressedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMYellowStyleButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{StaticResource EMYellowButtonBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource EMYellowButtonForegroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" CornerRadius="20" BorderThickness="2" Background="{TemplateBinding Background}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource EMYellowButtonMouseOverBackgroundColor}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{StaticResource EMYellowButtonMouseOverForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource EMYellowButtonIsPressedBackgroundColor}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{StaticResource EMYellowButtonIsPressedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMYellowStyleButton2" TargetType="{x:Type Button}" BasedOn="{StaticResource EMYellowStyleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" CornerRadius="20" BorderThickness="2" Background="{TemplateBinding Background}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource EMYellowButtonMouseOverBackgroundColor}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{StaticResource EMYellowButtonMouseOverForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource EMYellowButtonIsPressedBackgroundColor}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{StaticResource EMYellowButtonIsPressedBorderColor}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{StaticResource EMYellowButtonIsPressedForegroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMUpdateClientImageButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/1a.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/1b.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="EMPencilIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/15.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/15-a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMMoneyIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/12.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/12a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMConfirmIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="19"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/9.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/9a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMPrinterIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/4.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/4a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMEmailIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/6.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/6a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMNoteIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="37"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/5.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/5a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMCallClientIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="23"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/14.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/14a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMPClientIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="23"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/13.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/13a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMContactClientIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/2.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/2a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMCloseIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="27"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/16.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/16-a.png" TargetName="Image"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMCloseIconButtonStyle2" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="27"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/16.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/16-a.png" TargetName="Image"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMUpdateIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/8.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/8a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EMRemoveIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="Image" Source="/Emplomania.UI;component/Images/7.png"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                                    </Trigger>-->
                        <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource EMBasicButtonMouseOverBackgroundColor}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{StaticResource EMBasicButtonMouseOverForegroundColor}"/>
                                    </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Source" Value="/Emplomania.UI;component/Images/7a.png" TargetName="Image"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="true"/>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                        <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--RadioButtons-->
    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#646464"/>
        <Setter Property="TextElement.FontSize" Value="14"/>
        <Setter Property="TextElement.FontFamily" Value="{StaticResource EMBasicFontFamily}"/>
        <Setter Property="TextElement.FontWeight" Value="{StaticResource EMFirstFontWeight}"/>
    </Style>

    <Style x:Key="EMTitleRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="Ubuntu"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#ca2b92"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">

                        <Border x:Name="radioButtonBorder" BorderBrush="#ca2b92" BorderThickness="0" Background="Transparent" 
                                    CornerRadius="20" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="1,1,2,1" Padding="40,9,40,10" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderThickness" TargetName="radioButtonBorder" Value="2"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderThickness" TargetName="radioButtonBorder" Value="2"/>

                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="BorderThickness" TargetName="radioButtonBorder" Value="2"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DateSpickers-->
    <Style x:Key="EMDatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="#FF333333"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="{StaticResource EMTextBoxBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource EMTextBoxBorderColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.Resources>
                                <SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                    <Grid>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualStateGroup.Transitions>
                                                    <VisualTransition GeneratedDuration="0"/>
                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed"/>
                                                </VisualStateGroup.Transitions>
                                                <VisualState x:Name="Normal"/>
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <ColorAnimation Duration="0" To="#FF448DCA" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background"/>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                                                            <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                            <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Disabled"/>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" VerticalAlignment="Center" Width="19">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="20*"/>
                                                <ColumnDefinition Width="20*"/>
                                                <ColumnDefinition Width="20*"/>
                                                <ColumnDefinition Width="20*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="23*"/>
                                                <RowDefinition Height="19*"/>
                                                <RowDefinition Height="19*"/>
                                                <RowDefinition Height="19*"/>
                                            </Grid.RowDefinitions>
                                            <Border x:Name="Highlight" BorderBrush="#FF45D6FA" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,1,1" Margin="-1" Opacity="0" Grid.Row="0" Grid.RowSpan="4"/>
                                            <Border x:Name="Background" BorderBrush="#FFFFFFFF" BorderThickness="1" Background="#FF1F3B53" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3"/>
                                            <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                                <Border.Background>
                                                    <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                        <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                        <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                                        <GradientStop Color="#E5FFFFFF" Offset="0.625"/>
                                                        <GradientStop Color="#C6FFFFFF" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                        <GradientStop Color="#FF4084BD"/>
                                                        <GradientStop Color="#FFAFCFEA" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                                <Rectangle.Stroke>
                                                    <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                        <GradientStop Color="#FF494949"/>
                                                        <GradientStop Color="#FF9F9F9F" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Rectangle.Stroke>
                                            </Rectangle>
                                            <Path Grid.ColumnSpan="4" Grid.Column="0" Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z" Fill="#FF2F2F2F" HorizontalAlignment="Center" Margin="4,3,4,3" Grid.Row="1" Grid.RowSpan="3" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center"/>
                                            <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3"/>
                                            <Border x:Name="DisabledVisual" BorderBrush="#B2FFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,.5,.5" Opacity="0" Grid.Row="0" Grid.RowSpan="4"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Left" Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}" VerticalAlignment="Center" Width="25" Height="25"/>
                            <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" Grid.Row="0" Background="Transparent" VerticalContentAlignment="Stretch" Margin="0">
                                <DatePickerTextBox.Style>
                                    <Style TargetType="{x:Type DatePickerTextBox}">
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                                                    <Grid>
                                                        <Grid.Resources>
                                                            <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                                                        </Grid.Resources>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0"/>
                                                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState x:Name="Normal"/>
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="ContentElement"/>
                                                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="watermark_decorator"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="WatermarkStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0"/>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState x:Name="Unwatermarked"/>
                                                                <VisualState x:Name="Watermarked">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
                                                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="FocusStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0"/>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState x:Name="Unfocused"/>
                                                                <VisualState x:Name="Focused">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                                                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                <Border x:Name="ContentElement" BorderBrush="Yellow" Background="Transparent" BorderThickness="0"/>
                                                                <Border x:Name="watermark_decorator" BorderBrush="Yellow" Background="Transparent" BorderThickness="0" >
                                                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="0" Background="Transparent" BorderThickness="0" VerticalContentAlignment="Center" VerticalAlignment="Center" TextElement.FontSize="15"/>
                                                                </Border>
                                                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" BorderThickness="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="Transparent"/>
                                                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="0" IsHitTestVisible="False" Opacity="0" BorderThickness="0"/>
                                                            </Grid>
                                                        </Border>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </DatePickerTextBox.Style>
                            </DatePickerTextBox>
                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="1" Grid.Row="0" RadiusX="1"/>
                                <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
                            <Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TextBlock-->
    <Style x:Key="EMBasicTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Ubuntu"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="#646464"/>
    </Style>
    
    <!--ListViews-->
    <Style x:Key="EMBasicListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Border x:Name="Bd" Background="Transparent" CornerRadius="3" SnapsToDevicePixels="true">
                                    <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                                <!--<ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter TargetName="Bd" Property="BorderBrush" Value="Pink" />
                                        <Setter TargetName="Bd" Property="BorderThickness" Value="2" />
                                        <Setter Property="Background" TargetName="Bd">
                                            <Setter.Value>
                                                <LinearGradientBrush EndPoint="0.511,1.208" StartPoint="0.511,-0.547">
                                                    <GradientStop Color="#8DFFFFFF" Offset="0.266" />
                                                    <GradientStop Color="#FFB0B0B0" Offset="0.587" />
                                                    <GradientStop Color="#FFBEBEBE" Offset="0.582" />
                                                    <GradientStop Color="#FFC7C7C7" Offset="0.888" />
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>-->
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CheckBox-->
    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{telerik:Windows8Resource ResourceKey={x:Static telerik:Windows8ResourceKey.MainBrush}}"/>
        <Setter Property="BorderBrush" Value="{telerik:Windows8Resource ResourceKey={x:Static telerik:Windows8ResourceKey.BasicBrush}}"/>
        <Setter Property="Foreground" Value="{StaticResource EMBasicForeground}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="{StaticResource EMBasicFontFamily}"/>
        <Setter Property="FontWeight" Value="{StaticResource EMFirstFontWeight}"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="Root" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke" Storyboard.TargetName="normal">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {x:Static telerik:Windows8ResourceKey.StrongBrush}}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke" Storyboard.TargetName="normal">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {x:Static telerik:Windows8ResourceKey.StrongBrush}}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="CheckVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {x:Static telerik:Windows8ResourceKey.StrongBrush}}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="IndeterminateVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {x:Static telerik:Windows8ResourceKey.StrongBrush}}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.6" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="grid"/>
                                        <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Content"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Unchecked"/>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckVisual"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="grid" HorizontalAlignment="Left" Height="13" Margin="1" VerticalAlignment="Center" Width="13">
                            <Rectangle x:Name="normal" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"/>
                            <Rectangle x:Name="CheckVisual" Fill="{DynamicResource {x:Static telerik:Windows8ResourceKey.AccentBrush}}" Margin="3" Opacity="0"/>
                            <Path x:Name="IndeterminateVisual" Fill="{DynamicResource {x:Static telerik:Windows8ResourceKey.AccentBrush}}" FlowDirection="LeftToRight" Margin="3" Opacity="0">
                                <Path.Data>
                                    <GeometryGroup>
                                        <RectangleGeometry Rect="0,0,7,7"/>
                                        <RectangleGeometry Rect="1,3,5,1"/>
                                    </GeometryGroup>
                                </Path.Data>
                            </Path>
                            <Rectangle x:Name="FocusVisual" Opacity="0" Stroke="{DynamicResource {x:Static telerik:Windows8ResourceKey.StrongBrush}}"/>
                        </Grid>
                        <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>